Picture Compression and Recovery
========================================================
transition: rotate
css: custom.css

author: Zhoutong Fu  
date: `r date() `

Overview
========================================================
type: section
The purpose of this presentation is to provide a overview and a simple guide for the shiny app **Playing with Picture Compressions** that I created as part of course project for *developing data products*  

I've applied Singular Value Decomposition to compress and store images and tried to recover compressed ones with their components.

- What is Singular Value Decomposition (SVD)
- Examples from **Playing with Picture Compressions**


SVD for Image
========================================================
type: section

Represented as matrix, an image could be factorized via SVD into three parts: left-singular vectors, singular values and right-singular values whose sizes are much smaller so that as to achieve tremendous compression. [wiki link to SVD](https://en.wikipedia.org/wiki/Singular_value_decomposition)

Multiplying the three parts we could recover the original image. However, as a purpose to further compress image, we could abandon more data and only store the top components from SVD, sacrifysing a little on the **quality** of recovered images.

My simple shiny app illustrates the relationship between the number of top components used and the quality of the recovered image. I will walk through some examples in the next two slides.  


A walk through (1)
========================================================
type: alert
left: 50%

There are 3 default pictures for users to choose: Taylor Swifty, Bruno Mars and Steve Curry. 

On the right hand side are the original pictures and for simplicity they black/white.

Users are also provided with a slider bar to pick the number of components desired. The next slide shows some recovered pictures with components 5, 10 20 and 40 of Bruno Mars and Taylor Swift.

***

```{r,echo=FALSE}
setwd("~/Desktop/coursera/develop data products/DevelopingDataProject")
source("dataFile.R")

showPic <- function(pic){

  # rotate the picture because image function in R has weild angle for veiwing
  # cat(dim(pic),file=stderr())
  rotated_pic <- t(pic[nrow(pic):1,])
  image(rotated_pic,col = gray((0:32)/32),asp=1,xlim=c(0,1),ylim=c(0,1) )
}

compressedPic <- function(pic,n){
  p.svd <- svd(pic)
  p.svd$u[,1:n] %*% diag(p.svd$d[1:n],nrow=n,ncol=n) %*% t(p.svd$v[,1:n])
}
```

```{r,echo=FALSE}
par(mfrow=c(2,1))
showPic(mars)
showPic(swift)

```




A walk through (2)
========================================================
type: alert

```{r,echo=FALSE}
par(mfrow=c(2,2))
showPic(compressedPic(mars,5))
showPic(compressedPic(mars,10))
showPic(compressedPic(mars,20))
showPic(compressedPic(mars,40))
```


*** 
```{r,echo=FALSE}
par(mfrow=c(2,2))
showPic(compressedPic(swift,5))
showPic(compressedPic(swift,10))
showPic(compressedPic(swift,20))
showPic(compressedPic(swift,40))
```

