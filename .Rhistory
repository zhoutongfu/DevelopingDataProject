View(data)
quartz()
par(mfrow=c(1,2))
plot(log2(cost),train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(cost),ndcg1,type="b",col=c(2),pch=c(2))
legend(1,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
data = arrange(data,gamma)
library(dplyr)
data = arrange(data,gamma)
quartz()
par(mfrow=c(1,2))
plot(log2(cost),train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(cost),ndcg1,type="b",col=c(2),pch=c(2))
legend(1,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
legend(-4,0.855,c("train","test"),col = c(1,2),pch=c(1,2))
filter(data,test = max(data$test))
value = max(data$test)
filter(data,test == max(data$test))
log2(0.2679434)
library(dplyr)
eps = c(0.01,0.1,0.5,1.0,2.0,4.0,8.0,1.5,2.5,3.0,2.75,2.6,2.55,2.45,2.40,2.35,2.30)
train_ndcg = c(0.8396938732462232,8392662205401596,0.8381429215230921,0.834874303438141,0.8401579143344112,0.7421859607481202,0.7421859607481202,0.8350063207628843,0.8449273219325492,0.7421859607481202,0.8287051223091932,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8351943826509182)
test_ndcg = c(0.847738954987585,0.8469516380650883,0.8459672286232941,0.8458848918144191,0.8528591185294992,0.7585918385460909,0.7585918385460909,0.8469058455383854,0.8588060388997126,0.7585918385460909,0.8286618925801827,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8544976226531552)
data = data.frame("eps"=eps,"train"=train_ndcg,"test"=test_ndcg)
data=arrange(data,eps)
View(data)
library(dplyr)
## linear epsilon, fixed C = 1, tuning on eps
eps = c(0.01,0.1,0.5,1.0,2.0,4.0,8.0,1.5,2.5,3.0,2.75,2.6,2.55,2.45,2.40,2.35,2.30)
train_ndcg = c(0.8396938732462232,0.8392662205401596,0.8381429215230921,0.834874303438141,0.8401579143344112,0.7421859607481202,0.7421859607481202,0.8350063207628843,0.8449273219325492,0.7421859607481202,0.8287051223091932,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8351943826509182)
test_ndcg = c(0.847738954987585,0.8469516380650883,0.8459672286232941,0.8458848918144191,0.8528591185294992,0.7585918385460909,0.7585918385460909,0.8469058455383854,0.8588060388997126,0.7585918385460909,0.8286618925801827,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8544976226531552)
data = data.frame("eps"=eps,"train"=train_ndcg,"test"=test_ndcg)
data=arrange(data,eps)
summary(data)
quartz()
plot(log2(eps),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(eps),data$test,type="b",col=c(2),pch=c(2))
quartz()
plot(log2(eps),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.8,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(eps),data$test,type="b",col=c(2),pch=c(2))
library(dplyr)
## linear epsilon, fixed C = 1, tuning on eps
eps = c(0.01,0.1,0.5,1.0,2.0,4.0,8.0,1.5,2.5,3.0,2.75,2.6,2.55,2.45,2.40,2.35,2.30)
train_ndcg = c(0.8396938732462232,0.8392662205401596,0.8381429215230921,0.834874303438141,0.8401579143344112,0.7421859607481202,0.7421859607481202,0.8350063207628843,0.8449273219325492,0.7421859607481202,0.8287051223091932,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8351943826509182)
test_ndcg = c(0.847738954987585,0.8469516380650883,0.8459672286232941,0.8458848918144191,0.8528591185294992,0.7585918385460909,0.7585918385460909,0.8469058455383854,0.8588060388997126,0.7585918385460909,0.8286618925801827,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8544976226531552)
data = data.frame("eps"=eps,"train"=train_ndcg,"test"=test_ndcg)
data=arrange(data,eps)
View(data)
quartz()
plot(log2(eps),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.8,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(eps),data$test,type="b",col=c(2),pch=c(2))
quartz()
plot(log2(data$eps),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.8,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(data$eps),data$test,type="b",col=c(2),pch=c(2))
quartz()
plot(data$eps,data$train,type="b",col=c(1),pch=c(1),ylim=c(0.8,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(data$eps,data$test,type="b",col=c(2),pch=c(2))
quartz()
plot(data$eps,data$train,type="b",col=c(1),pch=c(1),ylim=c(0.7,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(data$eps,data$test,type="b",col=c(2),pch=c(2))
quartz()
plot(data$eps,data$train,type="b",col=c(1),pch=c(1),ylim=c(0.7,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Tuning Epsilon on Linear e-SVR")
lines(data$eps,data$test,type="b",col=c(2),pch=c(2))
legend(6,0.80,c("train","test"),col = c(1,2),pch=c(1,2))
library(dplyr)
## linear epsilon, fixed C = 1, tuning on eps
eps = c(0.01,0.1,0.5,1.0,2.0,4.0,8.0,1.5,2.5,3.0,2.75,2.6,2.55,2.45,2.40,2.35,2.30)
train_ndcg = c(0.8396938732462232,0.8392662205401596,0.8381429215230921,0.834874303438141,0.8401579143344112,0.7421859607481202,0.7421859607481202,0.8350063207628843,0.8449273219325492,0.7421859607481202,0.8287051223091932,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8351943826509182)
test_ndcg = c(0.847738954987585,0.8469516380650883,0.8459672286232941,0.8458848918144191,0.8528591185294992,0.7585918385460909,0.7585918385460909,0.8469058455383854,0.8588060388997126,0.7585918385460909,0.8286618925801827,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8544976226531552)
data = data.frame("eps"=eps,"train"=train_ndcg,"test"=test_ndcg)
data=arrange(data,eps)
summary(data)
quartz()
plot(data$eps,data$train,type="b",col=c(1),pch=c(1),ylim=c(0.7,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Tuning Epsilon on Linear e-SVR")
lines(data$eps,data$test,type="b",col=c(2),pch=c(2))
legend(6,0.80,c("train","test"),col = c(1,2),pch=c(1,2))
value = max(data$test)
filter(data,test=value)
filter(data,test==value)
gamma = c(0.5,0.25,0.125,0.0625,0.03125,0.015625,0.0078125,0.00390625,0.3535533905932738,0.1767766952966369,.29730177875068026,0.2679433656340733,0.2871745887492587,0.2773923680169612,0.23325824788420185,0.24148408223121143,0.08838834764831845,0.04419417382415922,0.05440941020600775,0.0717936471873147,0.05831456197105048,0.005524271728019903,0.011048543456039806)
train_ndcg2 = c(0.8556472047151941,0.8479737975930924,0.8480848133404991,0.846153511800064,0.8462200184527787,0.8469223389304047,0.8451064798190747,0.8459999187400146,0.8514216003075357,0.8482528611672973,0.8494238259584087,0.8482266787890828,0.8489418016437086,0.8485907904329054,0.8485397302976659,0.8486156694488907,0.8471713941990051,0.8458228761995306,0.8462995806609971,0.8460223331666515,0.8463309893912783,0.8453721781918541,0.8463030526724642)
ndcg2 =       c(0.8478643501726971,0.8501227837071978,0.8479800861017821,0.8494229741783553,0.8486319692312522,0.8462570311866588,0.8491895190626745,0.8484630552981856,0.849516728752294,0.8479095599690482,0.8491386673819277,0.8511226880610908,0.850167672143554,0.8508925649261735,0.8480101515282109,0.8483419573718791,0.8478334802285082,0.8487181835904284,0.8489719705743142,0.848673542740698,0.8489499469835841,0.8488434428269923,0.8477780319653879)
data = data.frame("gamma"=gamma,"train"=train_ndcg2,"test"=ndcg2)
library(dplyr)
data = arrange(data,gamma)
quartz()
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
legend(-4,0.855,c("train","test"),col = c(1,2),pch=c(1,2))
value = max(data$test)
filter(data,test == max(data$test))
library(dplyr)
## linear epsilon, fixed C = 1, tuning on eps
eps = c(0.01,0.1,0.5,1.0,2.0,4.0,8.0,1.5,2.5,3.0,2.75,2.6,2.55,2.45,2.40,2.35,2.30)
train_ndcg = c(0.8396938732462232,0.8392662205401596,0.8381429215230921,0.834874303438141,0.8401579143344112,0.7421859607481202,0.7421859607481202,0.8350063207628843,0.8449273219325492,0.7421859607481202,0.8287051223091932,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8351943826509182)
test_ndcg = c(0.847738954987585,0.8469516380650883,0.8459672286232941,0.8458848918144191,0.8528591185294992,0.7585918385460909,0.7585918385460909,0.8469058455383854,0.8588060388997126,0.7585918385460909,0.8286618925801827,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8544976226531552)
data = data.frame("eps"=eps,"train"=train_ndcg,"test"=test_ndcg)
data=arrange(data,eps)
summary(data)
quartz()
plot(data$eps,data$train,type="b",col=c(1),pch=c(1),ylim=c(0.7,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Tuning Epsilon on Linear e-SVR")
lines(data$eps,data$test,type="b",col=c(2),pch=c(2))
legend(6,0.80,c("train","test"),col = c(1,2),pch=c(1,2))
value = max(data$test)
filter(data,test==value)
cost = c(8,4,2,1,0.5,0.25,0.125)
train_ndcg1 = c(0.8477251123855484,0.8477501393661327,0.8477224597310925,0.8477501393661327,0.8477501393661327,0.8477501393661327,0.8477195087357805)
ndcg1 =       c(0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.848650874537088)
# nonlinear SVM
gamma = c(0.5,0.25,0.125,0.0625,0.03125,0.015625,0.0078125,0.00390625,0.3535533905932738,0.1767766952966369,.29730177875068026,0.2679433656340733,0.2871745887492587,0.2773923680169612,0.23325824788420185,0.24148408223121143,0.08838834764831845,0.04419417382415922,0.05440941020600775,0.0717936471873147,0.05831456197105048,0.005524271728019903,0.011048543456039806)
train_ndcg2 = c(0.8556472047151941,0.8479737975930924,0.8480848133404991,0.846153511800064,0.8462200184527787,0.8469223389304047,0.8451064798190747,0.8459999187400146,0.8514216003075357,0.8482528611672973,0.8494238259584087,0.8482266787890828,0.8489418016437086,0.8485907904329054,0.8485397302976659,0.8486156694488907,0.8471713941990051,0.8458228761995306,0.8462995806609971,0.8460223331666515,0.8463309893912783,0.8453721781918541,0.8463030526724642)
ndcg2 =       c(0.8478643501726971,0.8501227837071978,0.8479800861017821,0.8494229741783553,0.8486319692312522,0.8462570311866588,0.8491895190626745,0.8484630552981856,0.849516728752294,0.8479095599690482,0.8491386673819277,0.8511226880610908,0.850167672143554,0.8508925649261735,0.8480101515282109,0.8483419573718791,0.8478334802285082,0.8487181835904284,0.8489719705743142,0.848673542740698,0.8489499469835841,0.8488434428269923,0.8477780319653879)
data = data.frame("gamma"=gamma,"train"=train_ndcg2,"test"=ndcg2)
library(dplyr)
data = arrange(data,gamma)
quartz()
par(mfrow=c(1,2))
plot(log2(cost),train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(cost),ndcg1,type="b",col=c(2),pch=c(2))
legend(1,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
legend(-4,0.855,c("train","test"),col = c(1,2),pch=c(1,2))
value = max(data$test)
filter(data,test == max(data$test))
library(dplyr)
## linear epsilon, fixed C = 1, tuning on eps
eps = c(0.01,0.1,0.5,1.0,2.0,4.0,8.0,1.5,2.5,3.0,2.75,2.6,2.55,2.45,2.40,2.35,2.30)
train_ndcg = c(0.8396938732462232,0.8392662205401596,0.8381429215230921,0.834874303438141,0.8401579143344112,0.7421859607481202,0.7421859607481202,0.8350063207628843,0.8449273219325492,0.7421859607481202,0.8287051223091932,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8351943826509182)
test_ndcg = c(0.847738954987585,0.8469516380650883,0.8459672286232941,0.8458848918144191,0.8528591185294992,0.7585918385460909,0.7585918385460909,0.8469058455383854,0.8588060388997126,0.7585918385460909,0.8286618925801827,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8544976226531552)
data = data.frame("eps"=eps,"train"=train_ndcg,"test"=test_ndcg)
data=arrange(data,eps)
summary(data)
quartz()
plot(data$eps,data$train,type="b",col=c(1),pch=c(1),ylim=c(0.7,0.86),xlab="Epsilon", ylab = "ndcg scores", main = "Tuning Epsilon on Linear e-SVR")
lines(data$eps,data$test,type="b",col=c(2),pch=c(2))
legend(6,0.80,c("train","test"),col = c(1,2),pch=c(1,2))
value = max(data$test)
filter(data,test==value)
log2(0.2588162309603444)
cost = c(8,4,2,1,0.5,0.25,0.125)
train_ndcg1 = c(0.8477251123855484,0.8477501393661327,0.8477224597310925,0.8477501393661327,0.8477501393661327,0.8477501393661327,0.8477195087357805)
ndcg1 =       c(0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.848650874537088)
# nonlinear SVM
gamma = c(0.5,0.25,0.125,0.0625,0.03125,0.015625,0.0078125,0.00390625,0.3535533905932738,0.1767766952966369,.29730177875068026,0.2679433656340733,0.2871745887492587,0.2773923680169612,0.23325824788420185,0.24148408223121143,0.08838834764831845,0.04419417382415922,0.05440941020600775,0.0717936471873147,0.05831456197105048,0.005524271728019903,0.011048543456039806)
train_ndcg2 = c(0.8556472047151941,0.8479737975930924,0.8480848133404991,0.846153511800064,0.8462200184527787,0.8469223389304047,0.8451064798190747,0.8459999187400146,0.8514216003075357,0.8482528611672973,0.8494238259584087,0.8482266787890828,0.8489418016437086,0.8485907904329054,0.8485397302976659,0.8486156694488907,0.8471713941990051,0.8458228761995306,0.8462995806609971,0.8460223331666515,0.8463309893912783,0.8453721781918541,0.8463030526724642)
ndcg2 =       c(0.8478643501726971,0.8501227837071978,0.8479800861017821,0.8494229741783553,0.8486319692312522,0.8462570311866588,0.8491895190626745,0.8484630552981856,0.849516728752294,0.8479095599690482,0.8491386673819277,0.8511226880610908,0.850167672143554,0.8508925649261735,0.8480101515282109,0.8483419573718791,0.8478334802285082,0.8487181835904284,0.8489719705743142,0.848673542740698,0.8489499469835841,0.8488434428269923,0.8477780319653879)
data = data.frame("gamma"=gamma,"train"=train_ndcg2,"test"=ndcg2)
library(dplyr)
data = arrange(data,gamma)
quartz()
par(mfrow=c(1,2))
plot(log2(cost),train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(cost),ndcg1,type="b",col=c(2),pch=c(2))
legend(1,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
legend(-4,0.855,c("train","test"),col = c(1,2),pch=c(1,2))
value = max(data$test)
filter(data,test == max(data$test))
cost = c(8,4,2,1,0.5,0.25,0.125)
train_ndcg1 = c(0.8477251123855484,0.8477501393661327,0.8477224597310925,0.8477501393661327,0.8477501393661327,0.8477501393661327,0.8477195087357805)
ndcg1 =       c(0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.848650874537088)
data1 = data.frame("cost"=cost,"train"=train_ndcg1,"test"=ndcg1)
max(data1$test)
filter(data1,test==max(data1$test))
cost = c(8,4,2,1,0.5,0.25,0.125)
train_ndcg1 = c(0.8477251123855484,0.8477501393661327,0.8477224597310925,0.8477501393661327,0.8477501393661327,0.8477501393661327,0.8477195087357805)
ndcg1 =       c(0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.848650874537088)
data1 = data.frame("cost"=cost,"train"=train_ndcg1,"test"=ndcg1)
max(data1$test)
filter(data1,test==max(data1$test))
# nonlinear SVM
gamma = c(0.5,0.25,0.125,0.0625,0.03125,0.015625,0.0078125,0.00390625,0.3535533905932738,0.1767766952966369,.29730177875068026,0.2679433656340733,0.2871745887492587,0.2773923680169612,0.23325824788420185,0.24148408223121143,0.08838834764831845,0.04419417382415922,0.05440941020600775,0.0717936471873147,0.05831456197105048,0.005524271728019903,0.011048543456039806)
train_ndcg2 = c(0.8556472047151941,0.8479737975930924,0.8480848133404991,0.846153511800064,0.8462200184527787,0.8469223389304047,0.8451064798190747,0.8459999187400146,0.8514216003075357,0.8482528611672973,0.8494238259584087,0.8482266787890828,0.8489418016437086,0.8485907904329054,0.8485397302976659,0.8486156694488907,0.8471713941990051,0.8458228761995306,0.8462995806609971,0.8460223331666515,0.8463309893912783,0.8453721781918541,0.8463030526724642)
ndcg2 =       c(0.8478643501726971,0.8501227837071978,0.8479800861017821,0.8494229741783553,0.8486319692312522,0.8462570311866588,0.8491895190626745,0.8484630552981856,0.849516728752294,0.8479095599690482,0.8491386673819277,0.8511226880610908,0.850167672143554,0.8508925649261735,0.8480101515282109,0.8483419573718791,0.8478334802285082,0.8487181835904284,0.8489719705743142,0.848673542740698,0.8489499469835841,0.8488434428269923,0.8477780319653879)
data = data.frame("gamma"=gamma,"train"=train_ndcg2,"test"=ndcg2)
library(dplyr)
data = arrange(data,gamma)
quartz()
par(mfrow=c(1,2))
plot(log2(cost),train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(cost),ndcg1,type="b",col=c(2),pch=c(2))
legend(1,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
legend(-4,0.855,c("train","test"),col = c(1,2),pch=c(1,2))
2^8 + 2^6 + 2^5 + 2^4 + 2^3 + 2^0
2^9 + 2^8 + 2^7 + 2^6 + 2^5 + 2^2 + 2^1
2^10 + 2^2 + 2^1 + 2^0
1/sqrt(109)
20*(0.2999-0.25) + 6*(.75-1)
20*(0.2999) − 20*(0.25) + 6*(4/3) − 6*(1)
20*(0.2999)-20*(0.25)+6*(4/3)-6*(1)
(1+2/3+3/4+4/6)/4
(1/2+2/3+3/5+4/7+5/8)/5
2/3/(1/2+2/3)
5/4*5/6/(5/8+5/6)
3 + 3/1.585 + 1/2+ 1/2.322 + 1/2.585 + 1/2.807
1+3/2 + 3/2.585 + 1/2.807
1+3/2 + 3/2.322 + 1/2.807
3/1.585 + 3/2 + 1/2.585 + 1/3 + 1/3.170
best = 3 + 3/1.585 + 1/2+ 1/2.322 + 1/2.585 + 1/2.807
r1 =1+3/2 + 3/2.322 + 1/2.807
r2 = 3/1.585 + 3/2 + 1/2.585 + 1/3 + 1/3.170
r1
r2
best
r1/best
r2/best
log(1/9)
log2(1/9)
log2(1/4)
library(shiny)
install.packages("manipulate")
manipulate(plot(1:x),x=slider(1,100))
library(manipulate)
manipulate(plot(1:x),x=slider(1,100))
quartz()
manipulate(plot(1:x),x=slider(1,100))
quartz()
manipulate(plot(1:x),x=slider(1,100))
install.packages("yhat")
showMethod("show")
showMethods("show")
getMethod("show")
getS3Method("show")
getS3method("show")
getS3method("print")
getS3method(print)
install.packages("shiny")
shiny::runApp('Desktop/coursera/develop data products/DevelopingDataProject')
library(datasets)
ls
?dataset
??datasets
?datasets
library(help = "datasets")
install.packages("Matrix")
library(Matrix)
showMethods(image)
data(CAex)
image(CAex,main="image(CAex)")
CAex
dim(CAex)
setwd("~/Desktop/2015 spring/cs 168/p5/data/p5_dataset")
?readPNG
readPNG
install.packages("png")
?readPNG
??readPNG
img <- readPNG("barack1.png")
library(png)
?readPNG
img <- readPNG("barack1.png")
plot(img)
dim(img)
img <- readPNG("barack1.png")[,1]
img <- readPNG("barack1.png")[:,1]
img <- readPNG("barack1.png")[,1]
str(img)
img[1,1]
img <- readPNG("barack1.png")[1,,]
plot(img)
dim(img)
img <- readPNG("barack1.png")[,,1]
dim(img)
dim(img) <- null
dim(img) <- NULL
dim(img)
length(img)
plot(img)
b1 <- readPNG("barack1.png")[,,1]
b2 <- readPNG("barack2.png")[,,1]
b3 <- readPNG("barack3.png")[,,1]
b4 <- readPNG("barack4.png")[,,1]
dim(b1) <- NULL
dim(b2) <- NULL
dim(b3) <- NULL
dim(b4) <- NULL
b1 <- matrix(readPNG("barack1.png")[,,1],nrow=1)
b1
length(b1)
plot(b1)
b2 <- readPNG("barack2.png")[,,1]
b2
as.vector(b2)
a = as.vector(b2)
length(a)
dim(a)
b1 <- readPNG("barack1.png")[,,1]
b2 <- readPNG("barack2.png")[,,1]
b3 <- readPNG("barack3.png")[,,1]
b4 <- readPNG("barack4.png")[,,1]
dim(b1) <- NULL
dim(b2) <- NULL
dim(b3) <- NULL
dim(b4) <- NULL
rbind(b1,b2,b3,b4)
a = rbind(b1,b2,b3,b4)
dim(a)
b1 <- as.vector(readPNG("barack1.png")[,,1])
b2 <- as.vector(readPNG("barack2.png")[,,1])
b3 <- as.vector(readPNG("barack3.png")[,,1])
b4 <- as.vector(readPNG("barack4.png")[,,1])
a = rbind(b1,b2,b3,b4)
dim(a)
b1 <- as.vector(readPNG("barack1.png")[,,1])
b2 <- as.vector(readPNG("barack2.png")[,,1])
b3 <- as.vector(readPNG("barack3.png")[,,1])
b4 <- as.vector(readPNG("barack4.png")[,,1])
m1 <- as.vector(readPNG("michelle1.png")[,,1])
m2 <- as.vector(readPNG("michelle2.png")[,,1])
m3 <- as.vector(readPNG("michelle3.png")[,,1])
m4 <- as.vector(readPNG("michelle4.png")[,,1])
pic <-rbind(b1,b2,b3,b4,m1,m2,m3,m4)
dim(pic)
svd(pic)
a = svd(pic)
str(a)
dim(pic)
dim(t(v))
dim(t(a$v))
a$v
dim(a$v)
matrix(a$v[,1],nrow=180,ncol=125)
result = matrix(a$v[,1],nrow=180,ncol=125)
image(result)
result = matrix(a$v[,1],nrow=125,ncol=180)
image(result)
result = matrix(a$v[,1],nrow=180,ncol=125)
image(result)
image(readPNG("barack1.png")[,,1])
image(t(readPNG("barack1.png")[,,1]))
image(readPNG("barack1.png")[,,1])
image(rev(readPNG("barack1.png")[,,1]))
rev(readPNG("barack1.png")[,,1])
a = rev(readPNG("barack1.png")[,,1])
dim(a)
length(a)
dim(a) <- c(125,180)
image(a)
dim(a) <- c(180,125)
image(a)
image(t(a))
cpt1 <- t(matrix(rev(compts$v[,1],nrow=180,ncol=125),nrow=180,ncol=125)
cpt1 <- t(matrix(rev(compts$v[,1],nrow=180,ncol=125),nrow=180,ncol=125))
rev(compts$v[,1],nrow=180,ncol=125)
compts <- svd(pic)
rev(compts$v[,1],nrow=180,ncol=125)
rev(matrix(compts$v[,1],nrow=180,ncol=125))
cpt1 <- t(matrix(rev(matrix(compts$v[,1],nrow=180,ncol=125),nrow=180,ncol=125))
)
cpt1 <- t(matrix(rev(matrix(compts$v[,1],nrow=180,ncol=125)),nrow=180,ncol=125))
image(cpt1)
?image
image(cpt1,colorkey=useAbs)
image(cpt1,useAbs=TRUE)
image(cpt1,colorkey=FALSE)
image(cpt1,col = heat.colors(255))
image(2*cpt1,col = heat.colors(255))
image(5*cpt1,col = heat.colors(255))
par(mfrow = c(1,2))
image(cpt1,col = heat.colors(255))
image(3*cpt1,col = heat.colors(255))
image(-3*cpt1,col = heat.colors(255))
image(3*cpt1,col = heat.colors(255))
image(cpt1,col = heat.colors(255))
image(1000*cpt1,col = heat.colors(255))
image(cpt1,col = heat.colors(255))
image(7000*cpt1,col = heat.colors(255))
setwd("~/Desktop/coursera/develop data products/images")
b <- readPNG("bruno_mars.png")[,,1]
image(b,col = heat.colors(255))
b
b <- readPNG("taylor_swift2.png")[,,1]
image(b,col = heat.colors(255))
image(b,col = heat.colors(12))
image(b,col = gray)
image(b,col = "gray")
image(b,col = gray.colors)
image(b,col = gray(0:8/8))
image(b,col = gray((0:8)/8))
b <- b[,ncol(b):1]
image(b,col = heat.colors(12))
ncol(b)
b <- readPNG("taylor_swift2.png")[,,1]
b <- b[,ncol(b):1]
image(b,col = gray((0:8)/8))
b <- readPNG("taylor_swift2.png")[,,1]
image(t(b),col = gray((0:8)/8))
b[,ncol(b):1]
b <- readPNG("taylor_swift2.png")[,,1]
b <- b[,ncol(b):1]
image(t(b),col = gray((0:8)/8))
b <- readPNG("taylor_swift2.png")[,,1]
b <- b[nrow(b):1,]
image(t(b),col = gray((0:8)/8))
b <- readPNG("taylor_swift2.png")[,,1]
b <- b[nrow(b):1,]
image(b,col = gray((0:8)/8))
image(t(b),col = gray((0:8)/8))
image(t(b),col = gray((0:1)/1))
image(t(b),col = gray((0:32)/32))
compressed <- b.svd$u[,1:i] %*% diag(b.svd$d[1:i]) %*% t(b.svd$v[,1:i])
b.svd <- svd(b)
compressed <- b.svd$u[,1:i] %*% diag(b.svd$d[1:i]) %*% t(b.svd$v[,1:i])
i=5
compressed <- b.svd$u[,1:i] %*% diag(b.svd$d[1:i]) %*% t(b.svd$v[,1:i])
image(compressed,col = gray((0:32)/32))
b <- readPNG("taylor_swift2.png")[,,1]
b.svd <- svd(b)
i=5
compressed <- b.svd$u[,1:i] %*% diag(b.svd$d[1:i]) %*% t(b.svd$v[,1:i])
rotated_c <- t(compressed[nrow(compressed):1,])
image(rotated_c,col = gray((0:32)/32))
i=30
compressed <- b.svd$u[,1:i] %*% diag(b.svd$d[1:i]) %*% t(b.svd$v[,1:i])
rotated_c <- t(compressed[nrow(compressed):1,])
image(rotated_c,col = gray((0:32)/32))
b <- readPNG("taylor_swift2.png")[,,1]
rotated_b <- t(b[nrow(b):1,])
image(rotated_b,col = gray((0:64)/64))
i=60
compressed <- b.svd$u[,1:i] %*% diag(b.svd$d[1:i]) %*% t(b.svd$v[,1:i])
rotated_c <- t(compressed[nrow(compressed):1,])
image(rotated_c,col = gray((0:64)/64))
dim(b.svd$d)
length(b.svd$d)
plot(b)
png(b)
png("taylor_swift2.png")
showPic <- function(pic){
# rotate the picture because image function in R has weild angle for veiwing
rotated_pic <- t(pic[nrow(pic):1,])
image(rotated_pic, col = gray((0:32)/32))
}
showPic(b)
a = showPic(b)
a
showPic <- function(pic){
# rotate the picture because image function in R has weild angle for veiwing
rotated_pic <- t(pic[nrow(pic):1,])
return(image(rotated_pic, col = gray((0:32)/32)))
}
a = showPic(b)
a
shiny::runApp('~/Desktop/coursera/develop data products/DevelopingDataProject')
dim(b)
min(b)
min(dim(b))
shiny::runApp('~/Desktop/coursera/develop data products/DevelopingDataProject')
swift <- readPNG("taylor_swift.png")[,,1]
mars <- readPNG("bruno_mars.png")[,,1]
showPic <- function(pic){
# rotate the picture because image function in R has weild angle for veiwing
# cat(dim(pic),file=stderr())
rotated_pic <- t(pic[nrow(pic):1,])
image(rotated_pic, col = gray((0:32)/32))
}
compressedPic <- function(pic,components){
p.svd <- svd(pic)
p.svd$u[,1:components] %*% diag(p.svd$d[1:components]) %*% t(p.svd$v[,1:components])
}
showPic(compressedPic(mars,1))
1:1
showPic(compressedPic(mars,2))
showPic(compressedPic(mars,1))
showPic(compressedPic(swift,1))
pic = swift
components=1
p.svd <- svd(pic)
p.svd$u
dim(p.svd$u)
dim(p.svd$d)
dim(p.svd$v)
length(p.svd$d)
p.svd$v[,1:components]
a = p.svd$v[,1:components]
dim(a)
a = p.svd$v[,1:2]
dim(a)
p.svd <- svd(pic)
p.svd$u[,1:components] %*% diag(p.svd$d[1:components]) %*% matrix(t(p.svd$v[,1:components]),nrow=components,ncol=dim(pic)[1])
matrix(t(p.svd$v[,1:components]),nrow=components,ncol=dim(pic)[1])
a = matrix(t(p.svd$v[,1:components]),nrow=components,ncol=dim(pic)[1])
dim(a)
diag(p.svd$d[1:components]
)
b = diag(p.svd$d[1:components])
dim(b)
components
p.svd$d[1:components]
p.svd$d[1:2]
?diag
diag(370,8)
diag(370.8)
?diag
p.svd$u[,1:components] %*% diag(p.svd$d[1:components],nrow=components,ncol=components) %*% matrix(t(p.svd$v[,1:components]),nrow=components,ncol=dim(pic)[1])
shiny::runApp('~/Desktop/coursera/develop data products/DevelopingDataProject')
?image
shiny::runApp('~/Desktop/coursera/develop data products/DevelopingDataProject')
i=8
paste("hello",i)
paste("hello",i,"ddd")
shiny::runApp('~/Desktop/coursera/develop data products/DevelopingDataProject')
?image
shiny::runApp('~/Desktop/coursera/develop data products/DevelopingDataProject')
