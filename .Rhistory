}
return(dcg)
}
DCG(r1)
r1 = c(2,2,2,1,1,0,0,0)
r2 = c(2,1,1,0,2,2,0,0)
r3 = c(2,2,2,1,0,0,0,1)
DCG(r1)
r1 = c(2,2,2,1,1,0,0,0)
R1 = c(2,1,1,0,2,2,0,0)
R2 = c(2,2,2,1,0,0,0,1)
pcg_gt = DCG(r1)
pcg_gt
pcg_gt = DCG(r1)
pcg_R1 = DCG(R1)
pcg_R2 = DCG(R2)
pcg_R1
pcg_R2
pcg_R1/pcg_gt
pcg_R2/pcg_gt
pcg_gt
title= c(1,2,3,4,5,6,7,8,9,10,11,12,13,14)
doc1 = c(0,0,1,0,0,0,0,1,0, 0, 0, 0, 0, 0)
doc2 = c(0,1,0,0,0,0,0,0,1, 1, 0, 0, 0, 0)
doc3 = c(0,0,0,0,0,1,1,0,0, 0, 0, 0, 0, 1)
doc4 = c(1,0,0,0,0,0,0,1,1, 0, 0, 1, 0, 0)
doc5 = c(0,0,0,1,1,0,0,0,1, 0, 1, 0, 0, 0)
docQ = c(0,0,0,0,0,0,0,0,1, 0, 0, 0, 1, 0)
Corpus = data.frame(doc1,doc2,doc3,doc4,doc5)
#1
m1 = 1/3*(doc1 + doc2 + doc3)
m2 = 1/2*(doc4 + doc5)
w = m1-m2
m1
m2 = 1/2*(doc4 + doc5)
m2
w = m1-m2
theta = 0.5*(sum(m1^2)-sum(m2^2))
doc = c(0,0,0,0,0,0,0,0,1,0,0,0,1,0)
sum(doc*w) - theta # m1 if > 0, m2 if < 0
theta
w
sum(doc*w) - theta # m1 if > 0, m2 if < 0
doc*w
theta
m1
m2
theta
sum(docQ*w) - theta # m1 if > 0, m2 if < 0
sum(doc*w) - theta # m1 if > 0, m2 if < 0
sum(doc1*w)-theta
sum(doc5*w)-theta
sum(doc6*w)-theta
doc4 = c(1,0,0,0,0,0,0,1,1, 0, 0, 1, 0, 0)
doc5 = c(0,0,0,1,1,0,0,0,1, 0, 1, 0, 0, 0)
docQ = c(0,0,0,0,0,0,0,0,1, 0, 0, 0, 1, 0)
sum(doc5*w)-theta
sum(doc4*w)-theta
sum(doc3*w)-theta
sum(doc2*w)-theta
sum(doc1*w)-theta
sum(docQ*w) - theta # m1 if > 0, m2 if < 0
c1 = 1/3*(doc1 + doc2 + doc3)
c2 = 1/2*(doc4 + doc5)
w = c1-c2
theta = 0.5*(sum(m1^2)-sum(m2^2))
sum(docQ*w) - theta # c1 if > 0, c2 if < 0
w
theta
sum(docQ*w) - theta # c1 if > 0, c2 if < 0
cos_sim = rep(NA,dim(Corpus)[2])
for (i in 1:(dim(Corpus)[2])){
cos_sim[i] <- sum(Corpus[,i] * docQ)
}
cos_sim
(1+1)/(8+14)*1/(8+14)*3/5 #0.002479339
(2+1)/(7+14)*1/(7+14)*2/5 #0.002721088
20*0.2999 - 2*4 + 1
20*(0.2999-0.25) + 6*(3/4-3/3)
20 × 0.299 + 6 × 3/4 − 9
20*0.299 + 6*3/4 − 9
20*0.299 + 6*3/4-9
2/735,3/1210
2/735
3/1210
2^(-1.5)
2^(-2.5)
2^(-2)
2^(-1.9)
2^(-1.8)
2^(-1.75)
cost = c(8,4,2,1,0.5,0.25,0.125)
train_ndcg1 = c(0.8477251123855484,0.8477501393661327,0.8477224597310925,0.8477501393661327,0.8477501393661327,0.8477501393661327,0.8477195087357805)
ndcg1 =       c(0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.848650874537088)
quartz()
plot(cost,train_ndcg1)
lines(cost,ndcg1)
source.with.encoding('~/Desktop/2015 spring/cs 276/R scripts/pa2_report.R', encoding='UTF-8')
cost = c(8,4,2,1,0.5,0.25,0.125)
train_ndcg1 = c(0.8477251123855484,0.8477501393661327,0.8477224597310925,0.8477501393661327,0.8477501393661327,0.8477501393661327,0.8477195087357805)
ndcg1 =       c(0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.848650874537088)
quartz()
plot(cost,train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.75,0.95),xlab="Cost", ylab = "ndcg scores",)
lines(cost,ndcg1,type="b",col=c(2),pch=c(2))
quartz()
plot(cost,train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.865),xlab="Cost", ylab = "ndcg scores",)
lines(cost,ndcg1,type="b",col=c(2),pch=c(2))
quartz()
plot(cost,train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.845,0.850),xlab="Cost", ylab = "ndcg scores",)
lines(cost,ndcg1,type="b",col=c(2),pch=c(2))
legend(.25,0.93,c("train","test"),col = c(1,2),pch=c(1,2))
quartz()
plot(cost,train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="Cost", ylab = "ndcg scores",)
lines(cost,ndcg1,type="b",col=c(2),pch=c(2))
legend(.25,0.93,c("train","test"),col = c(1,2),pch=c(1,2))
cost = c(8,4,2,1,0.5,0.25,0.125)
train_ndcg1 = c(0.8477251123855484,0.8477501393661327,0.8477224597310925,0.8477501393661327,0.8477501393661327,0.8477501393661327,0.8477195087357805)
ndcg1 =       c(0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.848650874537088)
quartz()
plot(log2(cost),train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores",)
lines(log2(cost),ndcg1,type="b",col=c(2),pch=c(2))
legend(2,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
2^-2
2^-3
2^-2.5
2^-2.1
2^-2.05
gamma = c(0.5,0.25,0.125,0.0625,0.03125,0.015625,0.0078125,0.00390625,0.3535533905932738,0.1767766952966369,.29730177875068026,0.2679433656340733,0.2871745887492587,0.2773923680169612,0.23325824788420185,0.24148408223121143,0.08838834764831845,0.04419417382415922,0.05440941020600775,0.0717936471873147,0.05831456197105048,0.005524271728019903,0.011048543456039806)
train_ndcg2 = c(0.8556472047151941,0.8479737975930924,0.8480848133404991,0.846153511800064,0.846153511800064,0.8462200184527787,0.8469223389304047,0.8451064798190747,0.8459999187400146,0.8514216003075357,0.8482528611672973,0.8494238259584087,0.8482266787890828,0.8489418016437086,0.8485907904329054,0.8485397302976659,0.8486156694488907,0.8471713941990051,0.8458228761995306,0.8462995806609971,0.8460223331666515,0.8463309893912783,0.8453721781918541,0.8463030526724642)
ndcg2 =       c(0.8478643501726971,0.8501227837071978,0.8479800861017821,0.8494229741783553,0.8494229741783553,0.8486319692312522,0.8462570311866588,0.8491895190626745,0.8484630552981856,0.849516728752294,0.8479095599690482,0.8491386673819277,0.8511226880610908,0.850167672143554,0.8508925649261735,0.8480101515282109,0.8483419573718791,0.8478334802285082,0.8487181835904284,0.8489719705743142,0.848673542740698,0.8489499469835841,0.8488434428269923,0.8477780319653879)
quartz()
plot(log2(gamma),train_ndcg2,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
length(gamma)
length(ndcg2)
gamma = c(0.5,0.25,0.125,0.0625,0.03125,0.015625,0.0078125,0.00390625,0.3535533905932738,0.1767766952966369,.29730177875068026,0.2679433656340733,0.2871745887492587,0.2773923680169612,0.23325824788420185,0.24148408223121143,0.08838834764831845,0.04419417382415922,0.05440941020600775,0.0717936471873147,0.05831456197105048,0.005524271728019903,0.011048543456039806)
train_ndcg2 = c(0.8556472047151941,0.8479737975930924,0.8480848133404991,0.846153511800064,0.8462200184527787,0.8469223389304047,0.8451064798190747,0.8459999187400146,0.8514216003075357,0.8482528611672973,0.8494238259584087,0.8482266787890828,0.8489418016437086,0.8485907904329054,0.8485397302976659,0.8486156694488907,0.8471713941990051,0.8458228761995306,0.8462995806609971,0.8460223331666515,0.8463309893912783,0.8453721781918541,0.8463030526724642)
ndcg2 =       c(0.8478643501726971,0.8501227837071978,0.8479800861017821,0.8494229741783553,0.8486319692312522,0.8462570311866588,0.8491895190626745,0.8484630552981856,0.849516728752294,0.8479095599690482,0.8491386673819277,0.8511226880610908,0.850167672143554,0.8508925649261735,0.8480101515282109,0.8483419573718791,0.8478334802285082,0.8487181835904284,0.8489719705743142,0.848673542740698,0.8489499469835841,0.8488434428269923,0.8477780319653879)
quartz()
plot(log2(gamma),train_ndcg2,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(gamma),ndcg2,type="b",col=c(2),pch=c(2))
legend(2,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
legend(-2,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
data = data.frame("gamma"=gamma,"train"=train_ndcg2,"test"=ndcg2)
?sort
library(dplr)
library(dplyr)
result = arrange(data,gamma)
View(result)
data = arrange(data,gamma)
data = data.frame("gamma"=gamma,"train"=train_ndcg2,"test"=ndcg2)
data = arrange(data,gamma)
quartz()
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
legend(-4,0.855,c("train","test"),col = c(1,2),pch=c(1,2))
select(data,max(test))
select(data,test=max(test))
str(data)
summary(data)
?select
?filter
filter(data,test=max(test))
filter(data,max(test))
max(data$test)
select(data,test=max(data$test))
select(data,max(data$test))
filter(data,test = max(data$test))
summarise(data,obs = max(test))
summarise(data,gamma,train, test,obs = max(test))
summarise(data,gamma,train, test, obs = max(test))
max(data$test)
summarise(data,max(test))
select(data,test = summarise(data,max(test)))
value = summarise(data,max(test))
value
select(data,test = value)
value
str(value)
value = max(data$test)
select(data,test = value)
select(data,test == value)
filter(data,test == value)
filter(data,test == summarise(data,max(test)))
summarise(data,max(test))
filter(data,test == max(data$test))
View(data)
str(filter(data,test == max(data$test)))
filter(data,test == max(data$test))$gamma
log2(filter(data,test == max(data$test))$gamma)
cost = c(8,4,2,1,0.5,0.25,0.125)
train_ndcg1 = c(0.8477251123855484,0.8477501393661327,0.8477224597310925,0.8477501393661327,0.8477501393661327,0.8477501393661327,0.8477195087357805)
ndcg1 =       c(0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.848650874537088)
quartz()
plot(log2(cost),train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(cost),ndcg1,type="b",col=c(2),pch=c(2))
legend(2,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
quartz()
par(mfrow=c(1,2))
plot(log2(cost),train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(cost),ndcg1,type="b",col=c(2),pch=c(2))
legend(2,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
legend(-4,0.855,c("train","test"),col = c(1,2),pch=c(1,2))
quartz()
par(mfrow=c(1,2))
plot(log2(cost),train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(cost),ndcg1,type="b",col=c(2),pch=c(2))
legend(1,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
legend(-4,0.855,c("train","test"),col = c(1,2),pch=c(1,2))
# nonlinear SVM
gamma = c(0.5,0.25,0.125,0.0625,0.03125,0.015625,0.0078125,0.00390625,0.3535533905932738,0.1767766952966369,.29730177875068026,0.2679433656340733,0.2871745887492587,0.2773923680169612,0.23325824788420185,0.24148408223121143,0.08838834764831845,0.04419417382415922,0.05440941020600775,0.0717936471873147,0.05831456197105048,0.005524271728019903,0.011048543456039806)
train_ndcg2 = c(0.8556472047151941,0.8479737975930924,0.8480848133404991,0.846153511800064,0.8462200184527787,0.8469223389304047,0.8451064798190747,0.8459999187400146,0.8514216003075357,0.8482528611672973,0.8494238259584087,0.8482266787890828,0.8489418016437086,0.8485907904329054,0.8485397302976659,0.8486156694488907,0.8471713941990051,0.8458228761995306,0.8462995806609971,0.8460223331666515,0.8463309893912783,0.8453721781918541,0.8463030526724642)
ndcg2 =       c(0.8478643501726971,0.8501227837071978,0.8479800861017821,0.8494229741783553,0.8486319692312522,0.8462570311866588,0.8491895190626745,0.8484630552981856,0.849516728752294,0.8479095599690482,0.8491386673819277,0.8511226880610908,0.850167672143554,0.8508925649261735,0.8480101515282109,0.8483419573718791,0.8478334802285082,0.8487181835904284,0.8489719705743142,0.848673542740698,0.8489499469835841,0.8488434428269923,0.8477780319653879)
data = data.frame("gamma"=gamma,"train"=train_ndcg2,"test"=ndcg2)
data = arrange(data,gamma)
quartz()
# linear SVM
cost = c(8,4,2,1,0.5,0.25,0.125)
train_ndcg1 = c(0.8477251123855484,0.8477501393661327,0.8477224597310925,0.8477501393661327,0.8477501393661327,0.8477501393661327,0.8477195087357805)
ndcg1 =       c(0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.848650874537088)
par(mfrow=c(1,2))
plot(log2(cost),train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(cost),ndcg1,type="b",col=c(2),pch=c(2))
legend(1,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
legend(-4,0.855,c("train","test"),col = c(1,2),pch=c(1,2))
cost = c(8,4,2,1,0.5,0.25,0.125)
train_ndcg1 = c(0.8477251123855484,0.8477501393661327,0.8477224597310925,0.8477501393661327,0.8477501393661327,0.8477501393661327,0.8477195087357805)
ndcg1 =       c(0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.848650874537088)
# nonlinear SVM
gamma = c(0.5,0.25,0.125,0.0625,0.03125,0.015625,0.0078125,0.00390625,0.3535533905932738,0.1767766952966369,.29730177875068026,0.2679433656340733,0.2871745887492587,0.2773923680169612,0.23325824788420185,0.24148408223121143,0.08838834764831845,0.04419417382415922,0.05440941020600775,0.0717936471873147,0.05831456197105048,0.005524271728019903,0.011048543456039806)
train_ndcg2 = c(0.8556472047151941,0.8479737975930924,0.8480848133404991,0.846153511800064,0.8462200184527787,0.8469223389304047,0.8451064798190747,0.8459999187400146,0.8514216003075357,0.8482528611672973,0.8494238259584087,0.8482266787890828,0.8489418016437086,0.8485907904329054,0.8485397302976659,0.8486156694488907,0.8471713941990051,0.8458228761995306,0.8462995806609971,0.8460223331666515,0.8463309893912783,0.8453721781918541,0.8463030526724642)
ndcg2 =       c(0.8478643501726971,0.8501227837071978,0.8479800861017821,0.8494229741783553,0.8486319692312522,0.8462570311866588,0.8491895190626745,0.8484630552981856,0.849516728752294,0.8479095599690482,0.8491386673819277,0.8511226880610908,0.850167672143554,0.8508925649261735,0.8480101515282109,0.8483419573718791,0.8478334802285082,0.8487181835904284,0.8489719705743142,0.848673542740698,0.8489499469835841,0.8488434428269923,0.8477780319653879)
data = data.frame("gamma"=gamma,"train"=train_ndcg2,"test"=ndcg2)
data = arrange(data,gamma)
View(data)
quartz()
par(mfrow=c(1,2))
plot(log2(cost),train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(cost),ndcg1,type="b",col=c(2),pch=c(2))
legend(1,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
data = arrange(data,gamma)
library(dplyr)
data = arrange(data,gamma)
quartz()
par(mfrow=c(1,2))
plot(log2(cost),train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(cost),ndcg1,type="b",col=c(2),pch=c(2))
legend(1,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
legend(-4,0.855,c("train","test"),col = c(1,2),pch=c(1,2))
filter(data,test = max(data$test))
value = max(data$test)
filter(data,test == max(data$test))
log2(0.2679434)
library(dplyr)
eps = c(0.01,0.1,0.5,1.0,2.0,4.0,8.0,1.5,2.5,3.0,2.75,2.6,2.55,2.45,2.40,2.35,2.30)
train_ndcg = c(0.8396938732462232,8392662205401596,0.8381429215230921,0.834874303438141,0.8401579143344112,0.7421859607481202,0.7421859607481202,0.8350063207628843,0.8449273219325492,0.7421859607481202,0.8287051223091932,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8351943826509182)
test_ndcg = c(0.847738954987585,0.8469516380650883,0.8459672286232941,0.8458848918144191,0.8528591185294992,0.7585918385460909,0.7585918385460909,0.8469058455383854,0.8588060388997126,0.7585918385460909,0.8286618925801827,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8544976226531552)
data = data.frame("eps"=eps,"train"=train_ndcg,"test"=test_ndcg)
data=arrange(data,eps)
View(data)
library(dplyr)
## linear epsilon, fixed C = 1, tuning on eps
eps = c(0.01,0.1,0.5,1.0,2.0,4.0,8.0,1.5,2.5,3.0,2.75,2.6,2.55,2.45,2.40,2.35,2.30)
train_ndcg = c(0.8396938732462232,0.8392662205401596,0.8381429215230921,0.834874303438141,0.8401579143344112,0.7421859607481202,0.7421859607481202,0.8350063207628843,0.8449273219325492,0.7421859607481202,0.8287051223091932,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8351943826509182)
test_ndcg = c(0.847738954987585,0.8469516380650883,0.8459672286232941,0.8458848918144191,0.8528591185294992,0.7585918385460909,0.7585918385460909,0.8469058455383854,0.8588060388997126,0.7585918385460909,0.8286618925801827,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8544976226531552)
data = data.frame("eps"=eps,"train"=train_ndcg,"test"=test_ndcg)
data=arrange(data,eps)
summary(data)
quartz()
plot(log2(eps),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(eps),data$test,type="b",col=c(2),pch=c(2))
quartz()
plot(log2(eps),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.8,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(eps),data$test,type="b",col=c(2),pch=c(2))
library(dplyr)
## linear epsilon, fixed C = 1, tuning on eps
eps = c(0.01,0.1,0.5,1.0,2.0,4.0,8.0,1.5,2.5,3.0,2.75,2.6,2.55,2.45,2.40,2.35,2.30)
train_ndcg = c(0.8396938732462232,0.8392662205401596,0.8381429215230921,0.834874303438141,0.8401579143344112,0.7421859607481202,0.7421859607481202,0.8350063207628843,0.8449273219325492,0.7421859607481202,0.8287051223091932,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8351943826509182)
test_ndcg = c(0.847738954987585,0.8469516380650883,0.8459672286232941,0.8458848918144191,0.8528591185294992,0.7585918385460909,0.7585918385460909,0.8469058455383854,0.8588060388997126,0.7585918385460909,0.8286618925801827,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8544976226531552)
data = data.frame("eps"=eps,"train"=train_ndcg,"test"=test_ndcg)
data=arrange(data,eps)
View(data)
quartz()
plot(log2(eps),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.8,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(eps),data$test,type="b",col=c(2),pch=c(2))
quartz()
plot(log2(data$eps),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.8,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(data$eps),data$test,type="b",col=c(2),pch=c(2))
quartz()
plot(data$eps,data$train,type="b",col=c(1),pch=c(1),ylim=c(0.8,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(data$eps,data$test,type="b",col=c(2),pch=c(2))
quartz()
plot(data$eps,data$train,type="b",col=c(1),pch=c(1),ylim=c(0.7,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(data$eps,data$test,type="b",col=c(2),pch=c(2))
quartz()
plot(data$eps,data$train,type="b",col=c(1),pch=c(1),ylim=c(0.7,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Tuning Epsilon on Linear e-SVR")
lines(data$eps,data$test,type="b",col=c(2),pch=c(2))
legend(6,0.80,c("train","test"),col = c(1,2),pch=c(1,2))
library(dplyr)
## linear epsilon, fixed C = 1, tuning on eps
eps = c(0.01,0.1,0.5,1.0,2.0,4.0,8.0,1.5,2.5,3.0,2.75,2.6,2.55,2.45,2.40,2.35,2.30)
train_ndcg = c(0.8396938732462232,0.8392662205401596,0.8381429215230921,0.834874303438141,0.8401579143344112,0.7421859607481202,0.7421859607481202,0.8350063207628843,0.8449273219325492,0.7421859607481202,0.8287051223091932,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8351943826509182)
test_ndcg = c(0.847738954987585,0.8469516380650883,0.8459672286232941,0.8458848918144191,0.8528591185294992,0.7585918385460909,0.7585918385460909,0.8469058455383854,0.8588060388997126,0.7585918385460909,0.8286618925801827,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8544976226531552)
data = data.frame("eps"=eps,"train"=train_ndcg,"test"=test_ndcg)
data=arrange(data,eps)
summary(data)
quartz()
plot(data$eps,data$train,type="b",col=c(1),pch=c(1),ylim=c(0.7,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Tuning Epsilon on Linear e-SVR")
lines(data$eps,data$test,type="b",col=c(2),pch=c(2))
legend(6,0.80,c("train","test"),col = c(1,2),pch=c(1,2))
value = max(data$test)
filter(data,test=value)
filter(data,test==value)
gamma = c(0.5,0.25,0.125,0.0625,0.03125,0.015625,0.0078125,0.00390625,0.3535533905932738,0.1767766952966369,.29730177875068026,0.2679433656340733,0.2871745887492587,0.2773923680169612,0.23325824788420185,0.24148408223121143,0.08838834764831845,0.04419417382415922,0.05440941020600775,0.0717936471873147,0.05831456197105048,0.005524271728019903,0.011048543456039806)
train_ndcg2 = c(0.8556472047151941,0.8479737975930924,0.8480848133404991,0.846153511800064,0.8462200184527787,0.8469223389304047,0.8451064798190747,0.8459999187400146,0.8514216003075357,0.8482528611672973,0.8494238259584087,0.8482266787890828,0.8489418016437086,0.8485907904329054,0.8485397302976659,0.8486156694488907,0.8471713941990051,0.8458228761995306,0.8462995806609971,0.8460223331666515,0.8463309893912783,0.8453721781918541,0.8463030526724642)
ndcg2 =       c(0.8478643501726971,0.8501227837071978,0.8479800861017821,0.8494229741783553,0.8486319692312522,0.8462570311866588,0.8491895190626745,0.8484630552981856,0.849516728752294,0.8479095599690482,0.8491386673819277,0.8511226880610908,0.850167672143554,0.8508925649261735,0.8480101515282109,0.8483419573718791,0.8478334802285082,0.8487181835904284,0.8489719705743142,0.848673542740698,0.8489499469835841,0.8488434428269923,0.8477780319653879)
data = data.frame("gamma"=gamma,"train"=train_ndcg2,"test"=ndcg2)
library(dplyr)
data = arrange(data,gamma)
quartz()
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
legend(-4,0.855,c("train","test"),col = c(1,2),pch=c(1,2))
value = max(data$test)
filter(data,test == max(data$test))
library(dplyr)
## linear epsilon, fixed C = 1, tuning on eps
eps = c(0.01,0.1,0.5,1.0,2.0,4.0,8.0,1.5,2.5,3.0,2.75,2.6,2.55,2.45,2.40,2.35,2.30)
train_ndcg = c(0.8396938732462232,0.8392662205401596,0.8381429215230921,0.834874303438141,0.8401579143344112,0.7421859607481202,0.7421859607481202,0.8350063207628843,0.8449273219325492,0.7421859607481202,0.8287051223091932,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8351943826509182)
test_ndcg = c(0.847738954987585,0.8469516380650883,0.8459672286232941,0.8458848918144191,0.8528591185294992,0.7585918385460909,0.7585918385460909,0.8469058455383854,0.8588060388997126,0.7585918385460909,0.8286618925801827,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8544976226531552)
data = data.frame("eps"=eps,"train"=train_ndcg,"test"=test_ndcg)
data=arrange(data,eps)
summary(data)
quartz()
plot(data$eps,data$train,type="b",col=c(1),pch=c(1),ylim=c(0.7,0.86),xlab="log2 of Cost", ylab = "ndcg scores", main = "Tuning Epsilon on Linear e-SVR")
lines(data$eps,data$test,type="b",col=c(2),pch=c(2))
legend(6,0.80,c("train","test"),col = c(1,2),pch=c(1,2))
value = max(data$test)
filter(data,test==value)
cost = c(8,4,2,1,0.5,0.25,0.125)
train_ndcg1 = c(0.8477251123855484,0.8477501393661327,0.8477224597310925,0.8477501393661327,0.8477501393661327,0.8477501393661327,0.8477195087357805)
ndcg1 =       c(0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.848650874537088)
# nonlinear SVM
gamma = c(0.5,0.25,0.125,0.0625,0.03125,0.015625,0.0078125,0.00390625,0.3535533905932738,0.1767766952966369,.29730177875068026,0.2679433656340733,0.2871745887492587,0.2773923680169612,0.23325824788420185,0.24148408223121143,0.08838834764831845,0.04419417382415922,0.05440941020600775,0.0717936471873147,0.05831456197105048,0.005524271728019903,0.011048543456039806)
train_ndcg2 = c(0.8556472047151941,0.8479737975930924,0.8480848133404991,0.846153511800064,0.8462200184527787,0.8469223389304047,0.8451064798190747,0.8459999187400146,0.8514216003075357,0.8482528611672973,0.8494238259584087,0.8482266787890828,0.8489418016437086,0.8485907904329054,0.8485397302976659,0.8486156694488907,0.8471713941990051,0.8458228761995306,0.8462995806609971,0.8460223331666515,0.8463309893912783,0.8453721781918541,0.8463030526724642)
ndcg2 =       c(0.8478643501726971,0.8501227837071978,0.8479800861017821,0.8494229741783553,0.8486319692312522,0.8462570311866588,0.8491895190626745,0.8484630552981856,0.849516728752294,0.8479095599690482,0.8491386673819277,0.8511226880610908,0.850167672143554,0.8508925649261735,0.8480101515282109,0.8483419573718791,0.8478334802285082,0.8487181835904284,0.8489719705743142,0.848673542740698,0.8489499469835841,0.8488434428269923,0.8477780319653879)
data = data.frame("gamma"=gamma,"train"=train_ndcg2,"test"=ndcg2)
library(dplyr)
data = arrange(data,gamma)
quartz()
par(mfrow=c(1,2))
plot(log2(cost),train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(cost),ndcg1,type="b",col=c(2),pch=c(2))
legend(1,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
legend(-4,0.855,c("train","test"),col = c(1,2),pch=c(1,2))
value = max(data$test)
filter(data,test == max(data$test))
library(dplyr)
## linear epsilon, fixed C = 1, tuning on eps
eps = c(0.01,0.1,0.5,1.0,2.0,4.0,8.0,1.5,2.5,3.0,2.75,2.6,2.55,2.45,2.40,2.35,2.30)
train_ndcg = c(0.8396938732462232,0.8392662205401596,0.8381429215230921,0.834874303438141,0.8401579143344112,0.7421859607481202,0.7421859607481202,0.8350063207628843,0.8449273219325492,0.7421859607481202,0.8287051223091932,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8449273219325492,0.8351943826509182)
test_ndcg = c(0.847738954987585,0.8469516380650883,0.8459672286232941,0.8458848918144191,0.8528591185294992,0.7585918385460909,0.7585918385460909,0.8469058455383854,0.8588060388997126,0.7585918385460909,0.8286618925801827,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8588060388997126,0.8544976226531552)
data = data.frame("eps"=eps,"train"=train_ndcg,"test"=test_ndcg)
data=arrange(data,eps)
summary(data)
quartz()
plot(data$eps,data$train,type="b",col=c(1),pch=c(1),ylim=c(0.7,0.86),xlab="Epsilon", ylab = "ndcg scores", main = "Tuning Epsilon on Linear e-SVR")
lines(data$eps,data$test,type="b",col=c(2),pch=c(2))
legend(6,0.80,c("train","test"),col = c(1,2),pch=c(1,2))
value = max(data$test)
filter(data,test==value)
log2(0.2588162309603444)
cost = c(8,4,2,1,0.5,0.25,0.125)
train_ndcg1 = c(0.8477251123855484,0.8477501393661327,0.8477224597310925,0.8477501393661327,0.8477501393661327,0.8477501393661327,0.8477195087357805)
ndcg1 =       c(0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.848650874537088)
# nonlinear SVM
gamma = c(0.5,0.25,0.125,0.0625,0.03125,0.015625,0.0078125,0.00390625,0.3535533905932738,0.1767766952966369,.29730177875068026,0.2679433656340733,0.2871745887492587,0.2773923680169612,0.23325824788420185,0.24148408223121143,0.08838834764831845,0.04419417382415922,0.05440941020600775,0.0717936471873147,0.05831456197105048,0.005524271728019903,0.011048543456039806)
train_ndcg2 = c(0.8556472047151941,0.8479737975930924,0.8480848133404991,0.846153511800064,0.8462200184527787,0.8469223389304047,0.8451064798190747,0.8459999187400146,0.8514216003075357,0.8482528611672973,0.8494238259584087,0.8482266787890828,0.8489418016437086,0.8485907904329054,0.8485397302976659,0.8486156694488907,0.8471713941990051,0.8458228761995306,0.8462995806609971,0.8460223331666515,0.8463309893912783,0.8453721781918541,0.8463030526724642)
ndcg2 =       c(0.8478643501726971,0.8501227837071978,0.8479800861017821,0.8494229741783553,0.8486319692312522,0.8462570311866588,0.8491895190626745,0.8484630552981856,0.849516728752294,0.8479095599690482,0.8491386673819277,0.8511226880610908,0.850167672143554,0.8508925649261735,0.8480101515282109,0.8483419573718791,0.8478334802285082,0.8487181835904284,0.8489719705743142,0.848673542740698,0.8489499469835841,0.8488434428269923,0.8477780319653879)
data = data.frame("gamma"=gamma,"train"=train_ndcg2,"test"=ndcg2)
library(dplyr)
data = arrange(data,gamma)
quartz()
par(mfrow=c(1,2))
plot(log2(cost),train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(cost),ndcg1,type="b",col=c(2),pch=c(2))
legend(1,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
legend(-4,0.855,c("train","test"),col = c(1,2),pch=c(1,2))
value = max(data$test)
filter(data,test == max(data$test))
cost = c(8,4,2,1,0.5,0.25,0.125)
train_ndcg1 = c(0.8477251123855484,0.8477501393661327,0.8477224597310925,0.8477501393661327,0.8477501393661327,0.8477501393661327,0.8477195087357805)
ndcg1 =       c(0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.848650874537088)
data1 = data.frame("cost"=cost,"train"=train_ndcg1,"test"=ndcg1)
max(data1$test)
filter(data1,test==max(data1$test))
cost = c(8,4,2,1,0.5,0.25,0.125)
train_ndcg1 = c(0.8477251123855484,0.8477501393661327,0.8477224597310925,0.8477501393661327,0.8477501393661327,0.8477501393661327,0.8477195087357805)
ndcg1 =       c(0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.8486904890932235,0.848650874537088)
data1 = data.frame("cost"=cost,"train"=train_ndcg1,"test"=ndcg1)
max(data1$test)
filter(data1,test==max(data1$test))
# nonlinear SVM
gamma = c(0.5,0.25,0.125,0.0625,0.03125,0.015625,0.0078125,0.00390625,0.3535533905932738,0.1767766952966369,.29730177875068026,0.2679433656340733,0.2871745887492587,0.2773923680169612,0.23325824788420185,0.24148408223121143,0.08838834764831845,0.04419417382415922,0.05440941020600775,0.0717936471873147,0.05831456197105048,0.005524271728019903,0.011048543456039806)
train_ndcg2 = c(0.8556472047151941,0.8479737975930924,0.8480848133404991,0.846153511800064,0.8462200184527787,0.8469223389304047,0.8451064798190747,0.8459999187400146,0.8514216003075357,0.8482528611672973,0.8494238259584087,0.8482266787890828,0.8489418016437086,0.8485907904329054,0.8485397302976659,0.8486156694488907,0.8471713941990051,0.8458228761995306,0.8462995806609971,0.8460223331666515,0.8463309893912783,0.8453721781918541,0.8463030526724642)
ndcg2 =       c(0.8478643501726971,0.8501227837071978,0.8479800861017821,0.8494229741783553,0.8486319692312522,0.8462570311866588,0.8491895190626745,0.8484630552981856,0.849516728752294,0.8479095599690482,0.8491386673819277,0.8511226880610908,0.850167672143554,0.8508925649261735,0.8480101515282109,0.8483419573718791,0.8478334802285082,0.8487181835904284,0.8489719705743142,0.848673542740698,0.8489499469835841,0.8488434428269923,0.8477780319653879)
data = data.frame("gamma"=gamma,"train"=train_ndcg2,"test"=ndcg2)
library(dplyr)
data = arrange(data,gamma)
quartz()
par(mfrow=c(1,2))
plot(log2(cost),train_ndcg1,type="b",col=c(1),pch=c(1),ylim=c(0.847,0.849),xlab="log2 of Cost", ylab = "ndcg scores", main = "Cost Tuning on Linear SVM")
lines(log2(cost),ndcg1,type="b",col=c(2),pch=c(2))
legend(1,0.8475,c("train","test"),col = c(1,2),pch=c(1,2))
plot(log2(data$gamma),data$train,type="b",col=c(1),pch=c(1),ylim=c(0.84,0.86),xlab="log2 of Gamma", ylab = "ndcg scores", main = "Gamma Tuning on RBF SVM")
lines(log2(data$gamma),data$test,type="b",col=c(2),pch=c(2))
legend(-4,0.855,c("train","test"),col = c(1,2),pch=c(1,2))
2^8 + 2^6 + 2^5 + 2^4 + 2^3 + 2^0
2^9 + 2^8 + 2^7 + 2^6 + 2^5 + 2^2 + 2^1
2^10 + 2^2 + 2^1 + 2^0
1/sqrt(109)
20*(0.2999-0.25) + 6*(.75-1)
20*(0.2999) − 20*(0.25) + 6*(4/3) − 6*(1)
20*(0.2999)-20*(0.25)+6*(4/3)-6*(1)
(1+2/3+3/4+4/6)/4
(1/2+2/3+3/5+4/7+5/8)/5
2/3/(1/2+2/3)
5/4*5/6/(5/8+5/6)
3 + 3/1.585 + 1/2+ 1/2.322 + 1/2.585 + 1/2.807
1+3/2 + 3/2.585 + 1/2.807
1+3/2 + 3/2.322 + 1/2.807
3/1.585 + 3/2 + 1/2.585 + 1/3 + 1/3.170
best = 3 + 3/1.585 + 1/2+ 1/2.322 + 1/2.585 + 1/2.807
r1 =1+3/2 + 3/2.322 + 1/2.807
r2 = 3/1.585 + 3/2 + 1/2.585 + 1/3 + 1/3.170
r1
r2
best
r1/best
r2/best
log(1/9)
log2(1/9)
log2(1/4)
library(shiny)
install.packages("manipulate")
manipulate(plot(1:x),x=slider(1,100))
library(manipulate)
manipulate(plot(1:x),x=slider(1,100))
quartz()
manipulate(plot(1:x),x=slider(1,100))
quartz()
manipulate(plot(1:x),x=slider(1,100))
install.packages("yhat")
showMethod("show")
showMethods("show")
getMethod("show")
getS3Method("show")
getS3method("show")
getS3method("print")
getS3method(print)
shiny::runApp('Desktop/coursera/develop data products/DevelopingDataProject')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
DONE(shinyapps)
DONE (shinyapps)
library(shinyapps)
shinyapps::setAccountInfo(name='zhoutongfu', token='0E2D16603243D054B32D748F90EE4E24', secret='HWnTNapPwax57KkH+6yfMz9hrIjjnMNpWTKu7amU')
shinyapps::deployApp()
showPic <- function(pic){
# rotate the picture because image function in R has weild angle for veiwing
# cat(dim(pic),file=stderr())
rotated_pic <- t(pic[nrow(pic):1,])
image(rotated_pic,col = gray((0:32)/32),asp=1,xlim=c(0,1),ylim=c(0,1) )
}
compressedPic <- function(pic,n){
p.svd <- svd(pic)
p.svd$u[,1:n] %*% diag(p.svd$d[1:n],nrow=n,ncol=n) %*% t(p.svd$v[,1:n])
}
source("dataFile.R")
setwd("~/Desktop/coursera/develop data products/DevelopingDataProject")
source("dataFile.R")
showPic(swift)
quartz()
showPic(swift)
quartz()
showPic(swift)
showPic(mars)
quartz()
showPic(swift)
quartz.save(showPic(swift),type="png")
quartz()
showPic(swift)
quartz(type="png")
quartz()
quartz(type="png")
showPic(swift)
quartz.save(showPic(swift),type="png")
quartz()
quartz.save(showPic(swift),type="png")
